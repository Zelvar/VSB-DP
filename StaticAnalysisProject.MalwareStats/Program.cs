using StaticAnalysisProject.Helpers;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace StaticAnalysisProject.MalwareStats
{
    class Program
    {
        static double CalculateStandardDeviation(IEnumerable<double> values)
        {
            double standardDeviation = 0;

            if (values.Any())
            {
                // Compute the average.     
                double avg = values.Average();

                // Perform the Sum of (value-avg)_2_2.      
                double sum = values.Sum(d => Math.Pow(d - avg, 2));

                // Put it all together.      
                standardDeviation = Math.Sqrt((sum) / (values.Count() - 1));
            }

            return standardDeviation;
        }

        static double Median(IEnumerable<double> values)
        {
            var val = values.ToArray();
            Array.Sort(val);
            return val[val.Count() / 2];
        }

        static void Main(string[] args)
        {
            #region Load files
            string[] jsonFiles = Directory.GetFiles(DataHelper.MLDataPath, "*.json", SearchOption.AllDirectories).ToArray();
            IList<IFileReport> _fileReports = new List<IFileReport>();

            foreach (var file in jsonFiles)
            {
                IList<FileReportRecovered> list = ExtensionHelpers.ListFromJson(File.ReadAllText(file));
                _fileReports = _fileReports.Concat(list).ToList();
            }

            //Show saved classes
            string[] fileClasses = _fileReports
                .Select(x => x.Class)
                .Distinct()
                .ToArray();

            Console.WriteLine("Loaded {0} reports", _fileReports.Count);
            Console.WriteLine();
            #endregion
            #region Process
            foreach (string fileClass in fileClasses)
            {
                Console.WriteLine("File class: {0}", fileClass);

                var allClassReports = _fileReports
                    .Select(x => x)
                    .Where(x => x.Class == fileClass)
                    .ToList();
                
                Console.WriteLine("Count: {0}", allClassReports.Count);
                Console.WriteLine();

                var mimeReports = allClassReports
                    .Select(x => x)
                    .GroupBy(x => x.MimeType);

                foreach (var classReports in mimeReports)
                {
                    Console.WriteLine("##########");
                    Console.WriteLine("Mimetype: {0}", classReports.FirstOrDefault().MimeType);
                    Console.WriteLine("Count: {0}", classReports.Count());
                    Console.WriteLine();

                    #region PE stats
                    //Stats about PE
                    var peStats32 = classReports
                        .Where(x => x.Is32b == true);
                    Console.WriteLine("{0} 32b", peStats32.Count());

                    var peStats64 = classReports
                        .Where(x => x.Is64b == true);
                    Console.WriteLine("{0} 64b", peStats64.Count());

                    var peStatsDLL = classReports
                        .Where(x => x.IsDll == true)
                        .Count();
                    Console.WriteLine("{0} DLL", peStatsDLL);

                    var peStatsExe = classReports
                        .Where(x => x.IsExe == true)
                        .Count();
                    Console.WriteLine("{0} EXE", peStatsExe - peStatsDLL);

                    var peStatsDotnet = classReports
                        .Where(x => x.IsDotNet == true)
                        .Count();
                    Console.WriteLine("{0} .NET", peStatsDotnet);

                    var peStatsDriver = classReports
                        .Where(x => x.IsDriver == true)
                        .Count();
                    Console.WriteLine("{0} Driver", peStatsDriver);

                    var peStatsSigned = classReports
                        .Where(x => x.IsSigned == true)
                        .Count();
                    Console.WriteLine("{0} Signed", peStatsSigned);
                    Console.WriteLine();

                    var peStatsNumberOfSections = classReports
                        .Where(x => x.Sections != null && x.Sections.Count() != 0)
                        .Select(x => x.Sections.Count());

                    if (peStatsNumberOfSections.Count() != 0)
                    {
                        Console.WriteLine("{0} Average number of sections", peStatsNumberOfSections.Average());
                        Console.WriteLine("{0} Media number of sections", Median(peStatsNumberOfSections.Select(x => Convert.ToDouble(x))));
                        Console.WriteLine("{0} SD of sections", CalculateStandardDeviation(peStatsNumberOfSections.Select(x => Convert.ToDouble(x))));

                    }
                    var peStatsMime = classReports
                        .Select(x => x.MimeType)
                        .GroupBy(x => x)
                        .OrderByDescending(x => x.Count())
                        .ToDictionary(g => g.Key, G => G.Count());

                    foreach (var stat in peStatsMime.Take(5))
                    {
                        Console.WriteLine("{0} {1}", stat.Value, stat.Key);
                    }

                    Console.WriteLine();

                    // Stats about DLL
                    var dllStats = classReports
                        .Where(x => x.Imports != null && x.Imports.Keys != null)
                        .SelectMany(x => x.Imports.Keys)
                        .GroupBy(x => x, StringComparer.CurrentCultureIgnoreCase)
                        .OrderByDescending(x => x.Count())
                        .ToDictionary(g => g.Key, g => g.Count());

                    foreach (var stat in dllStats.Take(15))
                    {
                        Console.WriteLine("{0} {1}", stat.Value, stat.Key);
                    }

                    Console.WriteLine();

                    // Stats about functions
                    var methodStats = classReports
                        .Where(x => x.Imports != null && x.Imports.Values != null)
                        .SelectMany(x => x.Imports.Values)
                        .SelectMany(x => x)
                        .Where(x => x != null)
                        .GroupBy(x => x, (x, group) => new { Key = x, Value = group.Count() })    // (x, group) => new { Value = x, Count = group.Count();
                        .OrderByDescending(x => x.Value);


                    foreach (var stat in methodStats.Take(30))
                    {
                        Console.WriteLine("{1} {0}", (stat.Key.Length > 20) ? stat.Key.Substring(0, 15) + ".." : stat.Key, stat.Value);
                    }

                    Console.WriteLine();
                    #endregion
                    #region Behavior stats
                    // Stats about behavior
                    var behaviorStats = classReports
                        .SelectMany(x => x.Behavior)
                        .GroupBy(x => x)
                        .OrderByDescending(x => x.Count())
                        .ToDictionary(g => g.Key, g => g.Count());

                    foreach (var stat in behaviorStats.Take(15))
                    {
                        Console.WriteLine("{0} {1}", stat.Value, stat.Key);
                    }

                    Console.WriteLine();
                    #endregion
                    #region Entropy
                    var entropyAverage = classReports
                        .Select(x => x.Entropy);

                    Console.WriteLine("Entropy average: {0}", entropyAverage.Average());
                    Console.WriteLine("Entropy median: {0}", Median(entropyAverage));
                    Console.WriteLine("Entropy standard deviation: {0}", CalculateStandardDeviation(entropyAverage));


                    var entropyStats = classReports
                        .Select(x => x.Entropy)
                        .GroupBy(x => Math.Round(x * 2, MidpointRounding.AwayFromZero) / 2)
                        .ToDictionary(x => x.Key, x => x.Count())
                        .OrderBy(x => x.Key);

                    foreach (var entropy in entropyStats)
                    {
                        Console.WriteLine("{0} {1}", entropy.Value, entropy.Key);
                    }
                    Console.WriteLine();
                    #endregion
                    #region String stats
                    //Stats about Strings
                    var stringsMail = classReports
                        .Where(x => x.Mails.Count() > 0);
                    Console.WriteLine("{0} contains mail", stringsMail.Count());

                    var strinsIP = classReports
                        .Where(x => x.IPAddrs.Count() > 0);
                    Console.WriteLine("{0} contains ip", strinsIP.Count());

                    var stringsUrls = classReports
                        .Where(x => x.Urls.Count() > 0);
                    Console.WriteLine("{0} contains urls", stringsUrls.Count());

                    Console.WriteLine();
                    #endregion
                    #region VirusTotal
                    var virusTotalPostives = classReports
                        .Where(x => x.PositiveTests > 0);
                    Console.WriteLine("{0} has positive tests", virusTotalPostives.Count());
                    #endregion
                }
                //Append new line
                Console.WriteLine();
            }
            #endregion
        }
    }
}
